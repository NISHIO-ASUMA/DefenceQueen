//====================================
//
// スコア処理 [ score.h ]
// Author: Asuma Nishio
//
//=====================================

//**********************
// インクルードファイル
//**********************
#include "score.h"
#include "manager.h"
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include "load.h"

//==========================================
// コンストラクタ
//==========================================
CScore::CScore(int nPriority) : CObject(nPriority),
m_nScore(NULL),
m_col(COLOR_WHITE),
m_pos(VECTOR3_NULL),
m_rot(VECTOR3_NULL),
m_apNumber{},
m_pLoad{},
m_fHeight(0.0f),
m_fWidth(0.0f)
{
	// 値のクリア
}
//==========================================
// デストラクタ
//==========================================
CScore::~CScore()
{
	// 無し
}
//==========================================
// 生成処理
//==========================================
CScore* CScore::Create(D3DXVECTOR3 pos,float fWidth,float fHeight)
{
	// スコアインスタンス生成
	CScore* pScore = new CScore;

	// nullptrだったら
	if (pScore == nullptr) return nullptr;

	// 座標,サイズ設定
	pScore->m_pos = pos;
	pScore->m_fWidth = fWidth;
	pScore->m_fHeight = fHeight;

	// 初期化失敗時
	if (FAILED(pScore->Init()))
	{
		// nullptrを返す
		return nullptr;
	}
	
	// スコアポインタを返す
	return pScore;
}
//==========================================
// 初期化処理
//==========================================
HRESULT CScore::Init(void)
{
	// 横幅計算
	float fTexPos = m_fWidth / NUM_SCORE;

	// 桁数分
	for (int nCnt = 0; nCnt < NUM_SCORE; nCnt++)
	{
		// インスタンス生成
		m_apNumber[nCnt] = new CNumber;

		// 初期化処理
		m_apNumber[nCnt]->Init(D3DXVECTOR3(m_pos.x - (fTexPos * 2.0f * nCnt), m_pos.y,0.0f), fTexPos, m_fHeight);

		// ナンバー変数のサイズ
		m_apNumber[nCnt]->SetSize(fTexPos, m_fHeight);

		// 座標設定
		m_apNumber[nCnt]->SetPos(m_pos);

		// テクスチャセット
		m_apNumber[nCnt]->SetTexture("number003.png");
	}

	// ポインタ生成
	m_pLoad = std::make_unique<CLoad>();

	// 初期化結果を返す
	return S_OK;
}
//==========================================
// 終了処理
//==========================================
void CScore::Uninit(void)
{
	// NOTE : 検証 : ここでスコアを書き出す
	// SaveScore();

	// 使った分破棄
	for (int nCnt = 0; nCnt < NUM_SCORE; nCnt++)
	{
		// nullptrチェック
		if (m_apNumber[nCnt] != nullptr)
		{
			// 終了
			m_apNumber[nCnt]->Uninit();

			// 破棄
			delete m_apNumber[nCnt];

			// ポインタ初期化
			m_apNumber[nCnt] = nullptr;
		}
	}

	// ポインタ終了
	m_pLoad.reset();

	// 自身の破棄
	CObject::Release();
}
//==========================================
// 更新処理
//==========================================
void CScore::Update(void)
{
	// スコア格納
	int nScore = m_nScore;

	// 八桁分
	for (int nCntScore = 0; nCntScore < NUM_SCORE; nCntScore++) // 右から処理
	{
		// 桁数ごとに分割する値を計算
		int nDigit = nScore % NUM_DIGIT;

		nScore /= NUM_DIGIT;

		// ナンバー更新
		m_apNumber[nCntScore]->Update();

		// 桁更新
		m_apNumber[nCntScore]->SetDigit(nDigit);
	}
}
//==========================================
// 描画処理
//==========================================
void CScore::Draw(void)
{
	// 使っている桁数分の描画
	for (int nCnt = 0; nCnt < NUM_SCORE; nCnt++)
	{
		// ナンバー描画
		m_apNumber[nCnt]->Draw();
	}
}
//==========================================
// スコア加算処理
//==========================================
void CScore::AddScore(int nValue)
{
	// スコア加算
	m_nScore += nValue;
}
//==========================================
// スコア初期化
//==========================================
void CScore::DeleteScore()
{
	m_nScore = NULL;
}
//==========================================
// スコア書き出し処理
//==========================================
void CScore::SaveScore(void)
{
	// 一個の数値を書き出す
	m_pLoad->SaveInt("data/SCORE/GameScore.bin", m_nScore);
}
